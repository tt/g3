// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eventbus.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	eventbus.proto

It has these top-level messages:
	PublishRequest
	SubscribeRequest
	SubscribeResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublishRequest struct {
	Event *google_protobuf.Any `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *PublishRequest) Reset()                    { *m = PublishRequest{} }
func (m *PublishRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()               {}
func (*PublishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PublishRequest) GetEvent() *google_protobuf.Any {
	if m != nil {
		return m.Event
	}
	return nil
}

type SubscribeRequest struct {
	Offset string `protobuf:"bytes,1,opt,name=offset" json:"offset,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SubscribeRequest) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

type SubscribeResponse struct {
	Offset string               `protobuf:"bytes,1,opt,name=offset" json:"offset,omitempty"`
	Event  *google_protobuf.Any `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SubscribeResponse) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *SubscribeResponse) GetEvent() *google_protobuf.Any {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishRequest)(nil), "eventbus.PublishRequest")
	proto.RegisterType((*SubscribeRequest)(nil), "eventbus.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "eventbus.SubscribeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventBus service

type EventBusClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (EventBus_SubscribeClient, error)
}

type eventBusClient struct {
	cc *grpc.ClientConn
}

func NewEventBusClient(cc *grpc.ClientConn) EventBusClient {
	return &eventBusClient{cc}
}

func (c *eventBusClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/eventbus.EventBus/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBusClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (EventBus_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventBus_serviceDesc.Streams[0], c.cc, "/eventbus.EventBus/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventBusSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventBus_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type eventBusSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventBusSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EventBus service

type EventBusServer interface {
	Publish(context.Context, *PublishRequest) (*google_protobuf1.Empty, error)
	Subscribe(*SubscribeRequest, EventBus_SubscribeServer) error
}

func RegisterEventBusServer(s *grpc.Server, srv EventBusServer) {
	s.RegisterService(&_EventBus_serviceDesc, srv)
}

func _EventBus_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventbus.EventBus/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventBus_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventBusServer).Subscribe(m, &eventBusSubscribeServer{stream})
}

type EventBus_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type eventBusSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventBusSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EventBus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eventbus.EventBus",
	HandlerType: (*EventBusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _EventBus_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EventBus_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eventbus.proto",
}

func init() { proto.RegisterFile("eventbus.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2d, 0x4b, 0xcd,
	0x2b, 0x49, 0x2a, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0xa5, 0x24,
	0xd3, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xe2, 0x49, 0xa5, 0x69, 0xfa, 0x89, 0x79, 0x95,
	0x10, 0x45, 0x52, 0xd2, 0xe8, 0x52, 0xa9, 0xb9, 0x05, 0x25, 0x50, 0x49, 0x25, 0x1b, 0x2e, 0xbe,
	0x80, 0xd2, 0xa4, 0x9c, 0xcc, 0xe2, 0x8c, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x2d,
	0x2e, 0x56, 0xb0, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x22, 0x7a, 0x10, 0xed, 0x7a,
	0x30, 0xed, 0x7a, 0x8e, 0x79, 0x95, 0x41, 0x10, 0x25, 0x4a, 0x5a, 0x5c, 0x02, 0xc1, 0xa5, 0x49,
	0xc5, 0xc9, 0x45, 0x99, 0x49, 0xa9, 0x30, 0xfd, 0x62, 0x5c, 0x6c, 0xf9, 0x69, 0x69, 0xc5, 0xa9,
	0x10, 0x03, 0x38, 0x83, 0xa0, 0x3c, 0xa5, 0x70, 0x2e, 0x41, 0x24, 0xb5, 0xc5, 0x05, 0xf9, 0x79,
	0xc5, 0xa9, 0xb8, 0x14, 0x23, 0x1c, 0xc1, 0x44, 0xd0, 0x11, 0x46, 0x93, 0x19, 0xb9, 0x38, 0x5c,
	0x41, 0x2c, 0xa7, 0xd2, 0x62, 0x21, 0x5b, 0x2e, 0x76, 0xa8, 0x7f, 0x84, 0x24, 0xf4, 0xe0, 0xa1,
	0x85, 0xea, 0x45, 0x29, 0x31, 0x0c, 0xe3, 0x5c, 0x41, 0x41, 0xa2, 0xc4, 0x20, 0xe4, 0xc1, 0xc5,
	0x09, 0x77, 0xa4, 0x90, 0x14, 0xc2, 0x00, 0x74, 0x5f, 0x4a, 0x49, 0x63, 0x95, 0x83, 0xf8, 0x4a,
	0x89, 0xc1, 0x80, 0x31, 0x89, 0x0d, 0x6c, 0xb6, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x94, 0xc2,
	0x4b, 0x03, 0xb3, 0x01, 0x00, 0x00,
}
